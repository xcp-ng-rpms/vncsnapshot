From c4f8cb837234381b1201d1c158d7f3abc3b77dc0 Mon Sep 17 00:00:00 2001
From: Frediano Ziglio <frediano.ziglio@citrix.com>
Date: Thu, 8 Mar 2012 20:14:02 +0000
Subject: [PATCH 1/3] avoid format error that could cause security problems

---
 sockets.cxx |   20 ++++++++++----------
 1 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/sockets.cxx b/sockets.cxx
index ecdf0db..0cbc651 100644
--- a/sockets.cxx
+++ b/sockets.cxx
@@ -192,13 +192,13 @@ int ConnectToTcpAddr(const char* hostname, int port)
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ConnectToTcpAddr: socket");
     return -1;
   }
 
   if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ConnectToTcpAddr: connect");
     close(sock);
     return -1;
@@ -206,7 +206,7 @@ int ConnectToTcpAddr(const char* hostname, int port)
 
   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,
 		 (char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ConnectToTcpAddr: setsockopt");
     close(sock);
     return -1;
@@ -233,7 +233,7 @@ FindFreeTcpPort(void)
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": FindFreeTcpPort: socket");
     return 0;
   }
@@ -268,28 +268,28 @@ int ListenAtTcpPort(int port)
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ListenAtTcpPort: socket");
     return -1;
   }
 
   if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,
 		 (const char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ListenAtTcpPort: setsockopt");
     close(sock);
     return -1;
   }
 
   if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ListenAtTcpPort: bind");
     close(sock);
     return -1;
   }
 
   if (listen(sock, 5) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": ListenAtTcpPort: listen");
     close(sock);
     return -1;
@@ -312,14 +312,14 @@ int AcceptTcpConnection(int listenSock)
 
   sock = accept(listenSock, (struct sockaddr *) &addr, &addrlen);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": AcceptTcpConnection: accept");
     return -1;
   }
 
   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,
 		 (char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName,stderr);
     perror(": AcceptTcpConnection: setsockopt");
     close(sock);
     return -1;
-- 
1.7.5.4

